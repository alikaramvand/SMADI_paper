
# we need a few library to go forward in predictions.
```{r}

library(tibble)
library(readr)
library(ggplot2)

library(devtools)
#devtools::install_github("rstudio/tensorflow")
#devtools::install_github("rstudio/keras")
#Execute the below
#tensorflow::install_tensorflow()
#tensorflow::tf_config()

library(keras)
library(tensorflow)

```

this data are filled  and outliers are removed by another code.


# Data Preparation 
```{r}

data_dir <- "F:/term_06_phd/test R nn/rnn"
fname <- file.path(data_dir, "calculation .csv")
raw_data <- read_csv(fname)
glimpse(raw_data)
```
Rows: 1827 Columns: 5
── Column specification ────────────────────────────────────────────────────────────
Delimiter: ","
chr (1): Date
dbl (4): NDVI, SSM, LST, daily_p_chirps

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 1,827
Columns: 5
$ Date           <chr> "1/1/2016", "1/2/2016", "1/3/2016", "1/4/2016", "1/5/2016",…
$ NDVI           <dbl> 0.06783891, 0.04800000, 0.49200000, 0.08800000, 0.04900000,…
$ SSM            <dbl> 24.45262, 24.33330, 24.20200, 24.10572, 23.99760, 23.50900,…
$ LST            <dbl> 14003.71, 14018.36, 14033.00, 14047.65, 14062.29, 14076.94,…
$ daily_p_chirps <dbl> 0.000, 0.000, 0.000, 4.736, 14.208, 0.000, 9.011, 22.527, 9…


Visualize data using ggplot. The first command provides an overview of the whole data set


```{r DataExploration}
library(vars)
VARselect(raw_data$SSM)
VARselect(raw_data$LST)
VARselect(raw_data$NDVI)
```



```{r DataExploration}
ggplot(raw_data, aes(x = 1:nrow(raw_data), y = `SSM`)) + geom_line()

ggplot(raw_data[1:1827, ], aes(x = 1:1827, y = `SSM`)) + geom_line()
```


The data is not in the proper format, so it will need some cleaning up. The chunk of code below scale and normalised the data, so it can be fed into the network later. Most libraries don't like to handle data that is not between -1 to 1.

```{r DataPreProcessing}

data <- data.matrix(raw_data[, -1])

mean <- apply(data, 2, mean)
std <- apply(data, 2, sd)
data <- scale(data, center = mean, scale = std)

normalize1 <- function(x) {
  return ((x - min(x)) / (max(x) - min(x)))
}

max <- apply(data,2,max)
min <- apply(data,2,min)

data <- apply(data, 2, normalize1)

plot(data[1:1300,2 ])
plot(data[1300:1827,2 ])

```

after that Elm prediction will be done








